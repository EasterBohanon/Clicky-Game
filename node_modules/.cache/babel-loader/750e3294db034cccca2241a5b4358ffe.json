{"ast":null,"code":"import _objectSpread from \"/Users/EastdaBeast/BootCampHW/Clicky-Game/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/EastdaBeast/BootCampHW/Clicky-Game/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/EastdaBeast/BootCampHW/Clicky-Game/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/EastdaBeast/BootCampHW/Clicky-Game/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/EastdaBeast/BootCampHW/Clicky-Game/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/EastdaBeast/BootCampHW/Clicky-Game/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/EastdaBeast/BootCampHW/Clicky-Game/src/components/Game/Game.js\";\nimport React, { Component } from 'react';\nimport Header from \"../Header/header.js\";\nimport Container from \"../Container/container.js\";\nimport ClickItem from \"../ClickItem/clickItem.js\";\nimport Footer from \"../Footer/footer.js\";\nimport data from \"../../data.json\";\n\nvar Game =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Game, _Component);\n\n  function Game() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Game);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Game)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      data: data,\n      score: 0,\n      topScore: 0,\n      alreadyClicked: []\n    };\n\n    _this.shuffleImages = function (data) {\n      // shuffle through the image\n      var i = data.length - 1;\n\n      while (i > 0) {\n        var a = Math.floor(Math.random() * (i + 1));\n        var temp = data[i];\n        data[i] = data[a];\n        data[a] = temp;\n        i--;\n      }\n\n      return data;\n    };\n\n    _this.handleClick = function (data) {\n      var correct = false;\n\n      var newData = _this.state.data.map(function (item) {\n        var newItem = _objectSpread({}, item);\n\n        if (newItem.id === id) {\n          if (!newItem.clicked) {\n            newItem.clicked = true;\n            correct = true;\n          }\n        }\n\n        return newItem;\n      });\n\n      correct ? _this.handleWin(newData) : _this.handleLoss(newData); // check if id has been clicked\n      // if clicked \n      // handleLoss\n      // else \n      // handleWin\n    };\n\n    _this.handleLoss = function (data) {\n      // stop the game and display that user has lost\n      _this.setState({\n        data: _this.resetGame(data),\n        score: 0\n      }); // display game\n\n    };\n\n    _this.handleWin = function (data) {\n      // update score\n      var _this$state = _this.state,\n          topScore = _this$state.topScore,\n          score = _this$state.score;\n      var newScore = score + 1;\n      var newTopScore = Math.max(newScore, topScore);\n\n      _this.setState({\n        data: _this.shuffleData(newData),\n        score: newScore,\n        topScore: newTopScore\n      });\n    };\n\n    _this.resetGame = function (data) {\n      var resetGame = data.map(function (item) {\n        return _objectSpread({}, item, {\n          clicked: false\n        });\n      });\n      return _this.shuffleImages(resetGame);\n    };\n\n    return _this;\n  }\n\n  _createClass(Game, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setState({\n        data: this.shuffleImages(this.state.data)\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, React.createElement(Header, {\n        className: \"header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }), React.createElement(Container, {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, React.createElement(ClickItem, {\n        key: item.id,\n        id: item.id,\n        handleClick: this.handleClick,\n        image: item.image,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      })), React.createElement(Footer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Game;\n}(Component);\n\nexport default Game;","map":{"version":3,"sources":["/Users/EastdaBeast/BootCampHW/Clicky-Game/src/components/Game/Game.js"],"names":["React","Component","Header","Container","ClickItem","Footer","data","Game","state","score","topScore","alreadyClicked","shuffleImages","i","length","a","Math","floor","random","temp","handleClick","correct","newData","map","item","newItem","id","clicked","handleWin","handleLoss","setState","resetGame","newScore","newTopScore","max","shuffleData","image"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Header from \"../Header/header.js\";\nimport Container from \"../Container/container.js\";\nimport ClickItem from \"../ClickItem/clickItem.js\"\nimport Footer from \"../Footer/footer.js\";\nimport data from \"../../data.json\";\n\nclass Game extends Component {\n    state = {\n        data,\n        score: 0,\n        topScore: 0,\n        alreadyClicked: []\n    }\n\n    componentDidMount() {\n        this.setState({ data: this.shuffleImages(this.state.data) });\n\n    }\n\n    shuffleImages = data => {\n        // shuffle through the image\n        let i = data.length - 1;\n        while (i > 0) {\n            const a = Math.floor(Math.random() * (i + 1));\n            const temp = data[i];\n            data[i] = data[a];\n            data[a] = temp;\n            i--;\n        }\n        return data;\n    };\n\n\n\n\n    handleClick = data => {\n        let correct = false;\n        const newData = this.state.data.map(item => {\n            const newItem = {...item};\n            if (newItem.id === id) {\n                if(!newItem.clicked){\n                    newItem.clicked = true;\n                    correct = true;\n\n                }\n            }\n            return newItem;\n        });\n        correct ? this.handleWin(newData)\n        :this.handleLoss(newData);\n        // check if id has been clicked\n        // if clicked \n        // handleLoss\n        // else \n        // handleWin\n    };\n\n    handleLoss = data => {\n        // stop the game and display that user has lost\n        this.setState({\n            data: this.resetGame(data),\n            score: 0\n        });\n        // display game\n    };\n\n    handleWin = data => {\n        // update score\n        const { topScore, score } = this.state;\n        const newScore = score + 1;\n        const newTopScore = Math.max(newScore, topScore);\n\n        this.setState({\n            data: this.shuffleData(newData),\n            score: newScore,\n            topScore: newTopScore\n        });\n\n    };\n\n    resetGame = data => {\n        const resetGame = data.map(item => ({ ...item, clicked: false }));\n        return this.shuffleImages(resetGame);\n    };\n\n\n\n    render() {\n        return (\n            <div>\n                <Header className=\"header\" />\n                <br></br>\n                <Container className=\"container\" >\n                 <ClickItem \n                 key={item.id}\n                 id={item.id}\n                 handleClick={this.handleClick}\n                 image ={item.image}\n                 />\n                </Container>\n               \n\n                <Footer />\n\n            </div>\n\n\n\n        );\n\n    }\n}\n\nexport default Game;"]},"metadata":{},"sourceType":"module"}